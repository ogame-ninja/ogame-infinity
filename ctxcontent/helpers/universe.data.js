import{isUniverseExpired,setUniverseExpiration}from"../services/universe.expirations.js";import{universeStorageOperator,universeStorageSupplier}from"../services/universe.storage.js";import{requestOGameServerData}from"../services/request.ogameServerData.js";const STORAGE_KEY="universe-data";export function getUniverseData(universe,force){const isExpire=force?Promise.resolve(true):isUniverseExpired(universe,STORAGE_KEY);const retrieve=universeStorageSupplier(universe,STORAGE_KEY);const storage=universeStorageOperator(universe,STORAGE_KEY);const flowRequest=async function(){const response=await requestOGameServerData(universe);const uniInformation=await toUniverseInformation(response);return storage(uniInformation).then((data=>{setUniverseExpiration(universe,STORAGE_KEY,response.expires);return data}))};const dataPromise=async function(isExpired){return isExpired?await flowRequest():await retrieve()};return isExpire.then(dataPromise)}function toUniverseInformation(response){const doc=response.document.documentElement;const universeData={timestamp:Number(doc.getAttribute("timestamp"))*1e3,serverId:doc.getAttribute("serverId")};const nodeLifeforms=doc.getElementsByTagName("lifeformSettings");let lifeformsData=toLifeforms(nodeLifeforms[0]??null);if(nodeLifeforms.length>0){doc.removeChild(nodeLifeforms[0])}Array.from(doc.childNodes).reduce(((acc,node)=>{acc[node.nodeName]=node.textContent;return acc}),universeData);return{universe:universeData,lifeforms:lifeformsData}}function toLifeforms(e){const result=new Map;if(!e){return result}return result}