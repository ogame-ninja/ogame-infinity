import{HIGHSCORE_CATEGORY,HIGHSCORE_TYPE,requestOGameHighScore}from"../services/request.ogameHighscore.js";const TYPES_NAMES_MAPPER=Object.freeze({[HIGHSCORE_TYPE.TOTAL]:"points",[HIGHSCORE_TYPE.ECONOMY]:"economy",[HIGHSCORE_TYPE.RESEARCH]:"research",[HIGHSCORE_TYPE.MILITARY]:"military",[HIGHSCORE_TYPE.MILITARY_LOST]:"lost",[HIGHSCORE_TYPE.MILITARY_BUILT]:"build",[HIGHSCORE_TYPE.MILITARY_DESTROYED]:"destroyed",[HIGHSCORE_TYPE.HONOR]:"honor",[HIGHSCORE_TYPE.LIFEFORM]:"lifeform"});const NAN_SCORE=Object.freeze({score:NaN,position:NaN});export const NAN_HIGHSCORE={build:NAN_SCORE,destroyed:NAN_SCORE,economy:NAN_SCORE,honor:NAN_SCORE,lifeforms:NAN_SCORE,lost:NAN_SCORE,military:NAN_SCORE,points:NAN_SCORE,research:NAN_SCORE};export function getPlayersHighscore(protocol, host, universe, universeNum, universeLang){const playerTypePromises=requestHighscore(protocol, host, universe, HIGHSCORE_CATEGORY.PLAYER, universeNum, universeLang);return Promise.all(playerTypePromises).then(toScoreMap)}export function getAllianceHighscore(universe){const allianceTypePromises=requestHighscore(protocol, host, universe, HIGHSCORE_CATEGORY.ALLIANCE, universeNum, universeLang);return Promise.all(allianceTypePromises).then(toScoreMap)}function requestHighscore(protocol, host, universe, category, universeNum, universeLang){let typesToUpdate=Object.values(HIGHSCORE_TYPE);if(typesToUpdate.length===0){return[]}return typesToUpdate.flatMap((type=>requestOGameHighScore(protocol, host, universe, category, type, universeNum, universeLang).then(toHighscoreTypeMap)))}function toScoreMap(actorScore){const uniquest=[...new Set(actorScore.map((e=>Object.keys(e))).flat().map(Number))];const scoreMap=uniquest.reduce(((acc,id)=>acc.set(id,{})),new Map);actorScore.forEach((e=>Object.entries(e).forEach((([id,value])=>{const playerID=Number(id);let acc=scoreMap.get(playerID);acc=Object.assign(acc,value);scoreMap.set(playerID,acc)}))));return scoreMap}function toHighscoreTypeMap(response){const scoreResult=thenScore(response.document);const typeName=TYPES_NAMES_MAPPER[scoreResult.type];return scoreResult.data.reduce(((acc,current)=>{const _current=Object.assign({},current);delete _current.id;return Object.assign(acc,{[current.id]:{[typeName]:_current}})}),{})}const thenScore=function(){function thenStandardScore(xml){const doc=xml.documentElement;return Array.from(doc.childNodes).map((node=>({id:parseInt(node.getAttribute("id"),10),score:parseInt(node.getAttribute("score"),10),position:parseInt(node.getAttribute("position"),10)})))}function thenPlayerMilitaryScore(xml){const doc=xml.documentElement;return Array.from(doc.childNodes).map((node=>({id:parseInt(node.getAttribute("id"),10),score:parseInt(node.getAttribute("score"),10),position:parseInt(node.getAttribute("position"),10),ships:parseInt(node.getAttribute("ships"),10)})))}function analyze(xml){const doc=xml.documentElement;const result={category:parseInt(doc.getAttribute("category"),10),type:parseInt(doc.getAttribute("type"),10),data:[]};if(result.category===HIGHSCORE_CATEGORY.PLAYER&&result.type===HIGHSCORE_TYPE.MILITARY){result.data=thenPlayerMilitaryScore(xml)}else{result.data=thenStandardScore(xml)}return result}return analyze}();