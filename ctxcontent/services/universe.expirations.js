import{fromNative,toNative}from"../../util/json.js";const _temp=new Map;const expiryUniverseKeyBuilder=universe=>`${universe}-expirations`;const _fetchTimestamp=(universeExpiryKey,expiryName)=>result=>{if(!Object.hasOwn(result,universeExpiryKey)){return undefined}const expirations=fromNative(result[universeExpiryKey]);_temp.set(universeExpiryKey,expirations);return expirations.get(expiryName)};export function isUniverseExpired(universe,name){const universeExpiryName=expiryUniverseKeyBuilder(universe);if(_temp.has(universeExpiryName)&&_temp.get(universeExpiryName).has(name)){const now=(new Date).getTime();return Promise.resolve(now>_temp.get(universeExpiryName).get(name))}return chrome.storage.local.get(universeExpiryName).then(_fetchTimestamp(universeExpiryName,name),(_=>undefined)).then((expiryTimestamp=>{if(!expiryTimestamp){return true}const now=(new Date).getTime();return now>expiryTimestamp}))}export async function setUniverseExpiration(universe,key,date){const universeExpiryName=expiryUniverseKeyBuilder(universe);const timestamp=Number(date);if(!_temp.has(universeExpiryName)){_temp.set(universeExpiryName,new Map)}_temp.get(universeExpiryName).set(key,timestamp);chrome.storage.local.set({[universeExpiryName]:toNative(_temp.get(universeExpiryName))}).then((_=>void 0))}export function setUniverseExpirationTTL(universe,key,ttl){const date=(new Date).getTime()+ttl;return setUniverseExpiration(universe,key,date)}